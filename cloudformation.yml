AWSTemplateFormatVersion: "2010-09-09"
Description: "üöÄ Bitcoin Tracker ‚Äì ECS Fargate + DynamoDB + API Gateway + LabRole"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "Select an existing VPC (usually the default one)"
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: "Public subnet 1 (AZ a)"
  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: "Public subnet 2 (AZ b)"
  ECRImage:
    Type: String
    Description: "ECR image URL (e.g. 992382582640.dkr.ecr.us-east-1.amazonaws.com/bitcoin-crud:latest)"

Resources:

  # üîπ DynamoDB table
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BitcoinPositions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # üîπ Security Group (allow from VPC + ALB)
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from VPC and Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: BitcoinAppSecurityGroup

  # üîπ Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: BitcoinTrackerALB
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: BitcoinTrackerALB

  # üîπ Target Group for ECS Tasks
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: BitcoinTrackerTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200

  # üîπ ALB Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # üîπ ECS Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: BitcoinCluster

  # üîπ Task Definition (uses LabRole)
  TaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: BitcoinTask
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: arn:aws:iam::992382582640:role/LabRole
      TaskRoleArn: arn:aws:iam::992382582640:role/LabRole
      ContainerDefinitions:
        - Name: bitcoin
          Image: !Ref ECRImage
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Environment:
            - Name: TABLE_NAME
              Value: BitcoinPositions
          HealthCheck:
            Command: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 120
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: bitcoin-tracker

  # üîπ CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/bitcoin-tracker
      RetentionInDays: 7

  # üîπ ECS Service (with Load Balancer)
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref Cluster
      ServiceName: BitcoinTrackerService
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDef
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref AppSecurityGroup
      LoadBalancers:
        - ContainerName: bitcoin
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 60

  # üîπ VPC Link for API Gateway
  VpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: BitcoinTrackerVpcLink
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref AppSecurityGroup

  # üîπ HTTP API Gateway (v2)
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: BitcoinTrackerAPI
      Description: Bitcoin Tracker REST API with ECS Backend
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - "*"

  # üîπ API Gateway Integration with ALB
  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: HTTP_PROXY
      IntegrationUri: !Ref LoadBalancerListener
      IntegrationMethod: ANY
      ConnectionType: VPC_LINK
      ConnectionId: !Ref VpcLink
      PayloadFormatVersion: "1.0"

  # üîπ API Gateway Route (catch-all)
  HttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "$default"
      Target: !Sub "integrations/${HttpApiIntegration}"

  # üîπ API Gateway Stage
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: "$default"
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: $context.requestId $context.error.message $context.error.messageString

  # üîπ CloudWatch Log Group for API Gateway
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/bitcoin-tracker
      RetentionInDays: 7

Outputs:
  DynamoDBTable:
    Description: "DynamoDB Table created for storing positions"
    Value: !Ref DynamoTable
    
  LoadBalancerDNS:
    Description: "Application Load Balancer DNS (for direct access)"
    Value: !GetAtt LoadBalancer.DNSName
    
  ApiGatewayEndpoint:
    Description: "üéØ API Gateway URL (USE THIS for your application)"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
    
  ApiGatewayId:
    Description: "API Gateway ID"
    Value: !Ref HttpApi
    
  VpcLinkId:
    Description: "VPC Link ID"
    Value: !Ref VpcLink
    
  ECSService:
    Description: "ECS Service Name"
    Value: !GetAtt Service.Name
    
  SecurityGroupId:
    Description: "Security Group ID"
    Value: !Ref AppSecurityGroup
    
  SwaggerDocs:
    Description: "üìò Swagger Documentation URL"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/docs"
    
  WebInterface:
    Description: "üåê Web Interface URL"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
    
  Notes:
    Description: "üìù Important Notes"
    Value: "Access your application via the API Gateway URL. The ALB is used internally for load balancing."