AWSTemplateFormatVersion: "2010-09-09"
Description: "Minimal ECS Fargate + DynamoDB + NLB + API Gateway v1 (single public endpoint)"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  AllSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  ECRImage:
    Type: String
    Description: "ECR image URL (e.g. 992382582640.dkr.ecr.us-east-1.amazonaws.com/bitcoin-crud:latest)"

Resources:

  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BitcoinPositions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internal HTTP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ### Network Load Balancer (works with VPC Link)
  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets: !Ref AllSubnets

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Protocol: TCP
      Port: 80
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthCheckPort: "80"
      Matcher:
        HttpCode: "200"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NLB
      Port: 80
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  Cluster:
    Type: AWS::ECS::Cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/bitcoin-tracker
      RetentionInDays: 7

  TaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: arn:aws:iam::992382582640:role/LabRole
      TaskRoleArn: arn:aws:iam::992382582640:role/LabRole
      ContainerDefinitions:
        - Name: bitcoin
          Image: !Ref ECRImage
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: TABLE_NAME
              Value: BitcoinPositions
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: bitcoin

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDef
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref AllSubnets
          SecurityGroups:
            - !Ref AppSecurityGroup
      LoadBalancers:
        - ContainerName: bitcoin
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  ### API Gateway + VPC Link
  VpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: BitcoinVpcLink
      TargetArns:
        - !Ref NLB

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BitcoinApi
      EndpointConfiguration:
        Types: [REGIONAL]

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "{proxy+}"

  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub "http://${NLB.DNSName}/{proxy}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ProxyOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode":200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProxyMethod
      - ProxyOptions
    Properties:
      RestApiId: !Ref Api
      StageName: prod

Outputs:
  ApiUrl:
    Description: "Public API endpoint (single DNS)"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"
