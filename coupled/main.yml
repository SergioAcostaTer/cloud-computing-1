AWSTemplateFormatVersion: "2010-09-09"
Description: "Bitcoin Positions API â€” ECS Fargate + API Gateway (API key required except /docs, with CORS support)"

Parameters:
  ECRImage:
    Type: String
    Description: ECR image URI (e.g., 1234567890.dkr.ecr.us-east-1.amazonaws.com/bitcoin-api:latest)
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  # DynamoDB
  PositionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BitcoinPositions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Networking
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS access on port 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: bitcoin-nlb
      Type: network
      Scheme: internal
      Subnets: !Ref SubnetIds

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: bitcoin-tg
      Port: 80
      Protocol: TCP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NLB
      Port: 80
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS
  Cluster:
    Type: AWS::ECS::Cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/bitcoin-api
      RetentionInDays: 7

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: bitcoin-api-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: arn:aws:iam::992382582640:role/LabRole
      TaskRoleArn: arn:aws:iam::992382582640:role/LabRole
      ContainerDefinitions:
        - Name: bitcoin-container
          Image: !Ref ECRImage
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: bitcoin
          Environment:
            - Name: TABLE_NAME
              Value: !Ref PositionsTable

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref SubnetIds
          SecurityGroups: [!Ref ECSSecurityGroup]
      LoadBalancers:
        - ContainerName: bitcoin-container
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  # API Gateway
  VPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: bitcoin-vpc-link
      TargetArns: [!Ref NLB]

  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bitcoin-api
      Description: Bitcoin Positions REST API

  ItemsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: items

  ItemResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !Ref ItemsResource
      PathPart: "{id}"

  DocsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: docs

  # CRUD methods (API key required)
  PostItems:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemsResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "http://${NLB.DNSName}:80/items"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink

  GetItems:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemsResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NLB.DNSName}:80/items"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink

  GetItem:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NLB.DNSName}:80/items/{id}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink
        RequestParameters:
          integration.request.path.id: method.request.path.id

  PutItem:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemResource
      HttpMethod: PUT
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: PUT
        Uri: !Sub "http://${NLB.DNSName}:80/items/{id}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink
        RequestParameters:
          integration.request.path.id: method.request.path.id

  DeleteItem:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: DELETE
        Uri: !Sub "http://${NLB.DNSName}:80/items/{id}"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink
        RequestParameters:
          integration.request.path.id: method.request.path.id

  # Public /docs
  GetDocs:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref DocsResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub "http://${NLB.DNSName}:80/docs"
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink

  # CORS (public, no key)
  OptionsItems:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  OptionsItem:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ItemResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  OptionsDocs:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref DocsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostItems
      - GetItems
      - GetItem
      - PutItem
      - DeleteItem
      - GetDocs
      - OptionsItems
      - OptionsItem
      - OptionsDocs
    Properties:
      RestApiId: !Ref RestAPI

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestAPI
      DeploymentId: !Ref Deployment
      StageName: prod

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: bitcoin-api-key
      Enabled: true

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: bitcoin-usage
      ApiStages:
        - ApiId: !Ref RestAPI
          Stage: !Ref Stage

  KeyBinding:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

Outputs:
  ApiUrl:
    Value: !Sub "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
  ApiKeyValue:
    Value: !Ref ApiKey
  TableName:
    Value: !Ref PositionsTable
  ServiceName:
    Value: !GetAtt Service.Name
  NlbDns:
    Value: !GetAtt NLB.DNSName
